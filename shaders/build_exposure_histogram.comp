#version 450
#extension GL_EXT_buffer_reference: enable
#extension GL_EXT_scalar_block_layout: enable

layout (binding = 0) uniform sampler2D hdr_image;

layout (scalar, buffer_reference) buffer Histogram {
    uint bins[];
};

layout (push_constant) uniform PushConstants {
    Histogram histogram;
    uint view_width;
    uint view_height;
} constants;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

const uint NUM_HISTOGRAM_BINS  = 256;
shared uint histogram_shared[NUM_HISTOGRAM_BINS];

float get_luminance(vec3 color){
    return dot(color, vec3(0.2127f, 0.7152f, 0.0722f));
}

uint hdr_to_histogram_bin(vec3 hdr_color){
    float luminance = get_luminance(hdr_color);

    if (luminance < 1e-5){
        return 0;
    }

    const float min_log_luminance = -1.0;
    const float recip_log_luminance_range = 1.0 / 15.0;
    float log_luminance = clamp((log2(luminance) - min_log_luminance) * recip_log_luminance_range, 0, 1);

    return uint(log_luminance * 254.f + 1.f);
}


void main() {
    // Make sure we don't write out of bounds
    //    bool out_bounds = (gl_GlobalInvocationID.x >= constants.view_width || gl_GlobalInvocationID.y >= constants.view_height);
    //    if (out_bounds){
    //        return;
    //    }

    const uint local_idx = gl_LocalInvocationIndex;
    const uvec2 pixel_coords = gl_GlobalInvocationID.xy;

    histogram_shared[local_idx] = 0;

    barrier();

    if (pixel_coords.x < constants.view_width && pixel_coords.y < constants.view_height){
        vec3 hdr_color = texelFetch(hdr_image, ivec2(pixel_coords), 0).rgb;
        uint bin_index = hdr_to_histogram_bin(hdr_color);

        atomicAdd(histogram_shared[bin_index], 1u);

    }

    barrier();

    atomicAdd(constants.histogram.bins[local_idx], histogram_shared[local_idx]);
}